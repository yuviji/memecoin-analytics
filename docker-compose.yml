services:
  # FastAPI Market Data Service
  api:
    build: .
    container_name: market-data-api
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/market_data
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
    networks:
      - market-data-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    container_name: market-data-postgres
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=market_data
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - market-data-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    container_name: market-data-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - market-data-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    container_name: market-data-zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - market-data-network
    restart: unless-stopped

  # Kafka Message Broker
  kafka:
    container_name: market-data-kafka
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - market-data-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list"]
      interval: 15s
      timeout: 10s
      start_period: 90s
      retries: 15

  # Kafka Consumer (separate service for moving averages)
  kafka-consumer:
    build: .
    container_name: market-data-consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/market_data
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - market-data-network
    restart: unless-stopped
    command: ["python", "-m", "app.services.kafka.consumer"]
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer (Database Admin UI)
  adminer:
    container_name: market-data-adminer
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - market-data-network
    restart: unless-stopped

  # Kafka UI (Optional)
  kafka-ui:
    container_name: market-data-kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    networks:
      - market-data-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: market-data-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - market-data-network
    restart: unless-stopped

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: market-data-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - market-data-network
    restart: unless-stopped

  # Celery Flower (Monitoring UI for Celery)
  flower:
    container_name: market-data-flower
    image: mher/flower:2.0
    ports:
      - "5555:5555"
    env_file:
      - ./.env
    environment:
      - FLOWER_PORT=5555
      - FLOWER_BROKER=redis://redis:6379/1
      - FLOWER_BASIC_AUTH=admin:admin
    networks:
      - market-data-network
    depends_on:
      - redis
      - celery-worker

  # Celery Worker
  celery-worker:
    container_name: market-data-celery-worker
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery worker --loglevel=info
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/market_data
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
    networks:
      - market-data-network
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Task Scheduler)
  celery-beat:
    container_name: market-data-celery-beat
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    command: celery -A app.core.celery beat --loglevel=info
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/market_data
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
    networks:
      - market-data-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=1); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  market-data-network:
    driver: bridge 